@model CustomerInfoModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwoAcc.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Info })
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
             var statesProgress = $("#states-loading-progress");
             statesProgress.show();
             $.ajax({
                 cache: false,
                 type: "GET",
                 url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                 data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}
<div class="static-page-cont-wrp">
    <h2 class="page-title">@T("Account.MyAccount") - @T("Account.CustomerInfo")</h2>
    <div class="row">
        <div class="col-md-8">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                var validationSummary = Html.ValidationSummary(true);
                if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                {
                    <div class="message-error">@validationSummary</div>
                }

                if (Model.GenderEnabled)
                {
                    <div class="form-group">
                        <label>@T("Account.Fields.Gender")</label>
                        <select class="form-control" style="width:100px" name="Gender" id = "gender-male">
                            <option @(Model.Gender == "F" ? "selected" : "") >@T("Account.Fields.Gender.Female")</option>
                            <option @(Model.Gender == "M"? "selected" : "")>@T("Account.Fields.Gender.Male")</option>
                        </select>
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.FirstName)
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", placeholder = T("Account.Fields.FirstName.Hint").Text })
                    @Html.ValidationMessageFor(model => model.FirstName)
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.LastName)
                    @Html.TextBoxFor(model => model.LastName, new { @class="form-control", placeholder = T("Account.Fields.LastName.Hint").Text })
                    @Html.ValidationMessageFor(model => model.LastName)
                </div>
                if (Model.DateOfBirthEnabled && false)
                {
                    <div class="inputs date-of-birth">
                        <label>@T("Account.Fields.DateOfBirth"):</label>
                        @Html.DatePickerDropDowns(Html.FieldNameFor(x => x.DateOfBirthDay),
                                        Html.FieldNameFor(x => x.DateOfBirthMonth),
                                        Html.FieldNameFor(x => x.DateOfBirthYear),
                                        DateTime.Now.Year - 110,
                                        DateTime.Now.Year,
                                        Model.DateOfBirthDay,
                                        Model.DateOfBirthMonth,
                                        Model.DateOfBirthYear)
                        @if (Model.DateOfBirthRequired)
                        {
                            @Html.RequiredHint()
                        }
                        @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                        @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                        @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.Phone)
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control", placeholder = T("Account.Fields.Phone.Hint").Text })
                    @Html.ValidationMessageFor(model => model.Phone)
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email)
                    @Html.TextBoxFor(model => model.Email, new { type = "email", @class = "form-control", placeholder = T("Account.Fields.Email.Hint").Text })
                    @Html.ValidationMessageFor(model => model.Email)
                </div>

                <input type="submit" value="@T("Common.Save")" name="save-info-button" class="btn btn-warning" />
            }
        </div>
        
    </div>
</div>

